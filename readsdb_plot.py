# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReadSDBDialog
                                 A QGIS plugin
 Read PySDB structural data into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Ondrej Lexa
        email                : lexa.ondrej@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtCore import Qt
from qgis.core import *

import matplotlib

# Need latest APSG
from apsg import StereoNet, Group, Fol, Lin

import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar

# qhull workaroud
import platform

# Make sure that we are using QT5
matplotlib.use('Qt5Agg')

qgis_qhull_fails = platform.platform().startswith('Linux')
if qgis_qhull_fails:
    from .stereogrid_workaround import StereoGrid as StereoGridQGIS
else:
    from apsg import StereoGrid

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui/readsdb_plot.ui'))


class MyMplCanvas(FigureCanvas):
    """Ultimately, this is a QWidget (as well as a FigureCanvasAgg, etc.)."""

    def __init__(self, parent=None):
        self.net = StereoNet()
        FigureCanvas.__init__(self, self.net.fig)
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self,
                                   QtWidgets.QSizePolicy.Expanding,
                                   QtWidgets.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)


class ReadSDBPlotDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, readsdb, parent=None):
        """Constructor."""
        super(ReadSDBPlotDialog, self).__init__(parent, Qt.WindowStaysOnTopHint)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushApply.clicked.connect(self.plotnet)
        self.data_layers = []
        self.canvas = MyMplCanvas(self)
        self.toolbar = NavigationToolbar(self.canvas, self)
        self.mplLayout.addWidget(self.canvas)
        self.mplLayout.addWidget(self.toolbar)
        self.net = self.canvas.net

    def opt(self, index, type, name):
        return self.tabWidget.widget(index).findChild(type, name)

    def plotnet(self):
        self.net.grid = self.checkGrid.isChecked()
        self.net.cla()
        for idx, layer in self.data_layers[::-1]:  # plot in right order
            if layer.selectedFeatureCount():
                features = layer.getSelectedFeatures()
            else:
                features = layer.getFeatures()
            # Create data Group
            if layer._is_planar:
                g = Group([Fol(f.attribute('azi'), f.attribute('inc')) for f in features], layer.name())
            else:
                g = Group([Lin(f.attribute('azi'), f.attribute('inc')) for f in features], layer.name())
            label = repr(g) if self.checkLabels.isChecked() else None
            # contours
            if self.opt(idx, QtWidgets.QCheckBox, 'checkContours').isChecked():
                nlevels = self.opt(idx, QtWidgets.QSpinBox, 'spinLevels').value()
                sigma = self.opt(idx, QtWidgets.QDoubleSpinBox, 'spinSigma').value()
                if qgis_qhull_fails:
                    kwargs = {'cmap': 'Greys', 'zorder': 1}
                    d = StereoGridQGIS(g, sigma=sigma)
                    mn = d.values.min()
                    mx = d.values.max()
                    levels = np.linspace(mn, mx, nlevels)
                    levels[-1] += 1e-8
                    legend = True
                if self.opt(idx, QtWidgets.QCheckBox, 'checkContoursFilled').isChecked():
                    if qgis_qhull_fails:
                        cs = self.net.fig.axes[self.net.active].tricontourf(d.triang, d.values, levels, **kwargs)
                        self.net.fig.axes[self.net.active].tricontour(d.triang, d.values, levels, colors="k")
                    else:
                        self.net.contourf(StereoGrid(g), levels=nlevels, sigma=sigma)
                else:
                    if qgis_qhull_fails:
                        cs = self.net.fig.axes[self.net.active].tricontour(d.triang, d.values, levels, **kwargs)
                    else:
                        self.net.contour(StereoGrid(g), levels=nlevels, sigma=sigma)
                if qgis_qhull_fails:
                    if legend:
                        ab = self.net.fig.axes[self.net.active].get_position().bounds
                        cbaxes = self.net.fig.add_axes([0.1, ab[1] + 0.1 * ab[3], 0.03, 0.8 * ab[3]])
                        cb = self.net.fig.colorbar(cs, cax=cbaxes)
                        if label:
                            cb.ax.set_title(label)
            # principal
            eigf = self.opt(idx, QtWidgets.QCheckBox, 'checkEigPlanes').isChecked()
            eigl = self.opt(idx, QtWidgets.QCheckBox, 'checkEigLines').isChecked()
            self.net.tensor(g.ortensor, eigenfols=eigf, eigenlins=eigl)
            # plot data
            markersize = self.opt(idx, QtWidgets.QSpinBox, 'spinSize').value()
            marker = self.opt(idx, QtWidgets.QComboBox, 'comboStyle').currentText()
            if layer._is_planar:
                if self.opt(idx, QtWidgets.QCheckBox, 'checkShowData').isChecked():
                    if self.opt(idx, QtWidgets.QCheckBox, 'checkAsPoles').isChecked():
                        self.net.pole(g, marker=marker, markersize=markersize, label=label)
                    else:
                        self.net.plane(g, label=label)
            else:
                if self.opt(idx, QtWidgets.QCheckBox, 'checkShowData').isChecked():
                    self.net.line(g, marker=marker, markersize=markersize, label=label)
        self.canvas.draw()
