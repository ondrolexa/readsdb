# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReadSDBDialog
                                 A QGIS plugin
 Read PySDB structural data into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Ondrej Lexa
        email                : lexa.ondrej@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtCore import Qt, QFileInfo
from qgis.core import QgsCoordinateReferenceSystem
import sqlite3

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui/readsdb_options.ui'))


class ReadSDBOptionsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, readsdb, parent=None):
        """Constructor."""
        super(ReadSDBOptionsDialog, self).__init__(parent, Qt.WindowStaysOnTopHint)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.btnBrowse.clicked.connect(self.browse)
        self.readsdb = readsdb
        self.settings = self.readsdb.settings
        
        self.sdbinfo(self.settings.value("gui/sdbname", type=str))

    def sdbinfo(self, filename):
        """Populate dialog with current values"""
        self.sdbname.setText(filename)
        self.offset.setText(self.settings.value("gui/offset", type=str))
        self.falsenorth.setText(self.settings.value("gui/falsenorth", type=str))
        
        try:
            conn = sqlite3.connect(filename)
            nsites = len(conn.execute("SELECT id FROM sites").fetchall())
            nunits = len(conn.execute("SELECT id FROM units").fetchall())
            ndata = len(conn.execute("SELECT id FROM structdata").fetchall())
            ntype = []
            for row in conn.execute("SELECT id,structure FROM structype ORDER BY pos"):
                ntype.append((row[1], len(conn.execute("SELECT id FROM structdata WHERE id_structype=?", (row[0],)).fetchall())))
            ntags = []
            for row in conn.execute("SELECT id,name FROM tags ORDER BY pos"):
                ntags.append((row[1], len(conn.execute("SELECT id FROM tagged WHERE id_tags=?", (row[0],)).fetchall())))
            #Create info text
            bline = '-------------------------\n'
            info = 'Sites: {} Units: {} Data: {}\n'.format(nsites,nunits,ndata)
            info += bline
            for row in ntype:
                info += 'Structure {}: {} measurements\n'.format(*row)
            info += bline
            for row in ntags:
                info += 'Tag {}: {} measurements\n'.format(*row)
            info += bline
            
            #parse CRS
            val = conn.execute("SELECT value FROM meta WHERE name='crs'").fetchall()
            if not val:
                val = conn.execute("SELECT value FROM meta WHERE name='proj4'").fetchall()
                if not val:
                    proj = value = 'EPSG:4326'
                    name = 'default'
                else:
                    value = val[0][0]
                    proj = 'PROJ4:' + value
                    name = 'proj4'
            else:
                proj = value = val[0][0]
                name = 'crs'
            crs = QgsCoordinateReferenceSystem(proj)
            
            info += 'SDB projection {}: {}\n'.format(name, value)
            info += 'QGIS CRS: {}\n'.format(crs.description())
            info += 'Created: {}\n'.format(conn.execute("SELECT value FROM meta WHERE name='created'").fetchall()[0][0])
            info += 'Last updated: {}\n'.format(conn.execute("SELECT value FROM meta WHERE name='updated'").fetchall()[0][0])
            info += 'Saved by version: {}'.format(conn.execute("SELECT value FROM meta WHERE name='version'").fetchall()[0][0])
            self.sdbInfoText.setPlainText(info)
            self.dbok = True
            conn.close()
        except:
            #self.sdbname.setText("")
            self.dbok = False
            QtWidgets.QMessageBox.warning(self, 'Warning', self.readsdb.tr(u'Please specify correct SDB database'))

    def accept(self):
        if self.dbok:
            try:
                self.settings.setValue("gui/sdbname", self.sdbname.text())
                self.settings.setValue("gui/offset", int(self.offset.text()))
                self.settings.setValue("gui/falsenorth", float(self.falsenorth.text()))
                super(ReadSDBOptionsDialog, self).accept()
            except:
                QtWidgets.QMessageBox.warning(self, 'Warning', self.readsdb.tr(u'Offset must be int and false north float number'))    
        else:
            QtWidgets.QMessageBox.warning(self, 'Warning', self.readsdb.tr(u'Please specify correct SDB database'))

    def browse(self):
        file, _ = QtWidgets.QFileDialog.getOpenFileName(self, self.readsdb.tr(u'Open SDB database'), self.sdbname.text(), "SDB database (*.sdb);;All files (*.*)")
        if file:
            self.sdbinfo(QFileInfo(file).absoluteFilePath())

