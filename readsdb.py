# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReadSDB
                                 A QGIS plugin
 Read PySDB structural data into QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-03
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Ondrej Lexa
        email                : lexa.ondrej@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Import the code for the dialog
from .readsdb_connect import ReadSDBConnectDialog
from .readsdb_import import ReadSDBImportLayer
from .readsdb_options import ReadSDBOptionsDialog
from .readsdb_structures import ReadSDBStructuresDialog
from .readsdb_plot import ReadSDBPlotDialog
# read geomag
from .geomag import geomag

import os
from datetime import date, datetime
from math import cos, sin, pi
from pathlib import Path
import sqlite3
from PyQt5 import uic
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant, Qt, QDate
from PyQt5.QtGui import QIcon, QCursor, QDoubleValidator
from PyQt5.QtWidgets import QAction, QTableView, QDataWidgetMapper, QHeaderView, QAbstractItemView, QDialogButtonBox, QFileDialog
from PyQt5.QtSql import QSqlDatabase, QSqlQuery, QSqlQueryModel, QSqlRelation, QSqlRelationalDelegate, QSqlRelationalTableModel, QSqlTableModel
from qgis.core import *
from qgis.gui import QgsMapToolIdentifyFeature

# Initialize Qt resources from file resources.py
from .resources import *

# Need latest APSG
import sys
sys.path.insert(0, '/home/ondro/develrepo/apsg')
from apsg import *

PYSDB_VERSION = '3.0.5'

SCHEMA_NEW = """PRAGMA auto_vacuum=0;
PRAGMA default_cache_size=2000;
PRAGMA encoding='UTF-8';
PRAGMA page_size=1024;
DROP TABLE IF EXISTS `units`;
CREATE TABLE IF NOT EXISTS `units` (`id` INTEGER NOT NULL, `pos` INTEGER NOT NULL DEFAULT 0, `name` VARCHAR ( 60 ) NOT NULL, `description` TEXT, PRIMARY KEY(`id`));
DROP TABLE IF EXISTS `tags`;
CREATE TABLE IF NOT EXISTS `tags` (`id` INTEGER NOT NULL, `pos` INTEGER NOT NULL DEFAULT 0, `name` VARCHAR ( 16 ) NOT NULL, `description` TEXT, PRIMARY KEY(`id`));
DROP TABLE IF EXISTS `tagged`;
CREATE TABLE IF NOT EXISTS `tagged` (`id` INTEGER, `id_tags` INTEGER NOT NULL, `id_structdata` INTEGER NOT NULL, FOREIGN KEY(`id_tags`) REFERENCES `tags`(`id`), PRIMARY KEY(`id_tags`,`id_structdata`), FOREIGN KEY(`id_structdata`) REFERENCES `structdata`(`id`));
DROP TABLE IF EXISTS `structype`;
CREATE TABLE IF NOT EXISTS `structype` (`id` INTEGER NOT NULL, `pos` INTEGER NOT NULL DEFAULT 0, `structure` VARCHAR ( 16 ) NOT NULL, `description` TEXT, `structcode` INTEGER DEFAULT NULL, `groupcode` INTEGER DEFAULT NULL, `planar` INTEGER DEFAULT 1, PRIMARY KEY(`id`));
DROP TABLE IF EXISTS `structdata`;
CREATE TABLE IF NOT EXISTS `structdata` (`id` INTEGER NOT NULL, `id_sites` INTEGER NOT NULL, `id_structype` INTEGER NOT NULL, `azimuth` FLOAT NOT NULL DEFAULT 0, `inclination` FLOAT NOT NULL DEFAULT 0, `description` TEXT, FOREIGN KEY(`id_sites`) REFERENCES `sites`(`id`), PRIMARY KEY(`id`), FOREIGN KEY(`id_structype`) REFERENCES `structype`(`id`));
DROP TABLE IF EXISTS `sites`;
CREATE TABLE IF NOT EXISTS `sites` (`id` INTEGER NOT NULL, `id_units` INTEGER NOT NULL, `name` VARCHAR ( 16 ) NOT NULL DEFAULT '', `x_coord` FLOAT DEFAULT NULL, `y_coord` FLOAT DEFAULT NULL, `description` TEXT, FOREIGN KEY(`id_units`) REFERENCES `units`(`id`), PRIMARY KEY(`id`));
DROP TABLE IF EXISTS `meta`;
CREATE TABLE IF NOT EXISTS `meta` (`id` INTEGER NOT NULL, `name` VARCHAR ( 16 ) NOT NULL, `value` TEXT, PRIMARY KEY(`id`));
DROP TABLE IF EXISTS `attach`;
CREATE TABLE IF NOT EXISTS `attach` (`id` INTEGER NOT NULL, `id_structdata_planar` INTEGER NOT NULL, `id_structdata_linear` INTEGER NOT NULL, PRIMARY KEY(`id`), FOREIGN KEY(`id_structdata_planar`) REFERENCES `structdata`(`id`), FOREIGN KEY(`id_structdata_linear`) REFERENCES `structdata`(`id`));
DROP INDEX IF EXISTS `ix_structdata_id_structype`;
CREATE INDEX IF NOT EXISTS `ix_structdata_id_structype` ON `structdata` (`id_structype`);
DROP INDEX IF EXISTS `ix_structdata_id_sites`;
CREATE INDEX IF NOT EXISTS `ix_structdata_id_sites` ON `structdata` (`id_sites`);
DROP INDEX IF EXISTS `ix_sites_id_units`;
CREATE INDEX IF NOT EXISTS `ix_sites_id_units` ON `sites` (`id_units`);
DROP INDEX IF EXISTS `ix_attach_id_structdata_planar`;
CREATE INDEX IF NOT EXISTS `ix_attach_id_structdata_planar` ON `attach` (`id_structdata_planar`);
DROP INDEX IF EXISTS `ix_attach_id_structdata_linear`;
CREATE INDEX IF NOT EXISTS `ix_attach_id_structdata_linear` ON `attach` (`id_structdata_linear`);
INSERT INTO structype VALUES (1, 1,'S', 'Default planar feature', 35, 13, 1);
INSERT INTO structype VALUES (2, 2, 'L', 'Default linear feature', 78, 13, 0);
INSERT INTO units VALUES (1, 1, 'Default', 'Default unit');"""

GM = geomag.GeoMag()

structure_fields = {'name': QVariant.String,
                    'unit': QVariant.String,
                    'azi': QVariant.Double,
                    'inc': QVariant.Double,
                    'struct': QVariant.String,
                    'tags': QVariant.String,
                    'desc': QVariant.String,
                    'planar': QVariant.Int,
                    'rotate': QVariant.Double,
                    'label': QVariant.String,
                    'lbloff': QVariant.String
                    }

site_fields = {'id': QVariant.Int,
               'name': QVariant.String,
               'unit': QVariant.String,
               'description': QVariant.String
               }


class ReadSDB:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # check SVG dirs
        readsdb_svg_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'svg')
        svg_paths = QgsSettings().value('svg/searchPathsForSVG')
        if svg_paths:
            if readsdb_svg_path not in svg_paths:
                QgsSettings().setValue('svg/searchPathsForSVG', svg_paths + [readsdb_svg_path])
        else:
            QgsSettings().setValue('svg/searchPathsForSVG', [readsdb_svg_path])
        # initialize locale
        if QSettings().value('locale/userLocale'):
            locale = QSettings().value('locale/userLocale')[0:2]
            locale_path = os.path.join(
                self.plugin_dir,
                'i18n',
                'ReadSDB_{}.qm'.format(locale))

            if os.path.exists(locale_path):
                self.translator = QTranslator()
                self.translator.load(locale_path)

                if qVersion() > '4.3.3':
                    QCoreApplication.installTranslator(self.translator)

        # Get the params from last session.
        self.settings = QSettings('LX', 'readsdb')
        if self.settings.value("offset") is None:
            self.settings.setValue("offset", 1.5)
        if self.settings.value("angle_gc") is None:
            self.settings.setValue("angle_gc", 0)
        if self.settings.value("angle_md") is None:
            self.settings.setValue("angle_md", 0)
        if self.settings.value("sdbname") is None:
            self.settings.setValue("sdbname", "")
        if self.settings.value("auto_gc") is None:
            self.settings.setValue("auto_gc", True)
        if self.settings.value("auto_md") is None:
            self.settings.setValue("auto_md", True)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Read SDB')
        # create toolbar
        self.toolbar = self.iface.addToolBar(u'ReadSDB')
        self.toolbar.setObjectName(u'ReadSDB')
        # create site dock
        self.dock = uic.loadUi(os.path.join(os.path.dirname(__file__), 'ui/dock_datadock.ui'))
        # create manager dialog
        self.manager = uic.loadUi(os.path.join(os.path.dirname(__file__), 'ui/readsdb_manager.ui'))

        # Create the dialogs (after translation) and keep reference
        self.connect_dlg = ReadSDBConnectDialog(self)
        self.options_dlg = ReadSDBOptionsDialog(self)
        self.structures_dlg = ReadSDBStructuresDialog(self)
        self.plot_dlg = ReadSDBPlotDialog(self)

        QgsProject.instance().layerStore().layerRemoved.connect(self.check_site_layer)

        # Store sites layer
        self.sites_layer = None

    def check_db(self):
        try:
            p = Path(self.settings.value("sdbname", type=str))
            if not p.is_file():
                self.settings.setValue("sdbname", "")
                raise AssertionError
            self.db = QSqlDatabase.addDatabase('QSQLITE')
            self.db.setDatabaseName(str(p))
            self.query = QSqlQuery()
            self.db.open()
            # self.db.transaction()
            # Site model and view
            self.sitemodel = QSqlRelationalTableModel()
            self.sitemodel.setTable('sites')
            # self.sitemodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.sitemodel.setRelation(1, QSqlRelation('units', 'id', 'name'))
            self.sitemodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.sitemodel.setHeaderData(1, Qt.Horizontal, "Unit")
            self.sitemodel.setHeaderData(2, Qt.Horizontal, "Name")
            self.sitemodel.setHeaderData(3, Qt.Horizontal, "X")
            self.sitemodel.setHeaderData(4, Qt.Horizontal, "Y")
            self.sitemodel.setHeaderData(5, Qt.Horizontal, "Description")
            self.sitemodel.select()
            self.manager.siteView.setModel(self.sitemodel)
            self.manager.siteView.setItemDelegate(QSqlRelationalDelegate(self.manager.siteView))
            self.manager.siteView.setSelectionBehavior(QTableView.SelectRows)
            self.manager.siteView.setSelectionMode(QTableView.SingleSelection)
            self.manager.siteView.hideColumn(0)
            self.manager.siteView.hideColumn(1)
            self.manager.siteView.hideColumn(3)
            self.manager.siteView.hideColumn(4)
            self.manager.siteView.hideColumn(5)
            self.manager.siteView.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)
            self.manager.siteView.verticalHeader().setVisible(False)
            # Data model and view
            self.datamodel = QSqlRelationalTableModel()
            self.datamodel.setTable('structdata')
            # self.datamodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.datamodel.setRelation(2, QSqlRelation('structype', 'id', 'structure'))
            self.datamodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.datamodel.setHeaderData(1, Qt.Horizontal, "ID_Site")
            self.datamodel.setHeaderData(2, Qt.Horizontal, "Structure")
            self.datamodel.setHeaderData(3, Qt.Horizontal, "Azi")
            self.datamodel.setHeaderData(4, Qt.Horizontal, "Inc")
            self.datamodel.setHeaderData(5, Qt.Horizontal, "Description")
            self.datamodel.setFilter("structdata.id_sites=0")
            self.datamodel.select()
            self.datamodel.relationModel(2).sort(1, Qt.AscendingOrder)
            self.manager.dataView.setModel(self.datamodel)
            self.manager.dataView.setItemDelegate(QSqlRelationalDelegate(self.manager.dataView))
            self.manager.dataView.hideColumn(0)
            self.manager.dataView.hideColumn(1)
            self.manager.dataView.horizontalHeader().setSectionResizeMode(5, QHeaderView.Stretch)
            self.manager.dataView.verticalHeader().setVisible(False)
            # Unit model and view
            self.unitmodel = QSqlTableModel()
            self.unitmodel.setTable('units')
            # self.unitmodel.setEditStrategy(QSqlTableModel.OnFieldChange)
            self.unitmodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.unitmodel.setHeaderData(1, Qt.Horizontal, "Position")
            self.unitmodel.setHeaderData(2, Qt.Horizontal, "Name")
            self.unitmodel.setHeaderData(3, Qt.Horizontal, "Description")
            self.unitmodel.select()
            self.manager.unitView.setModel(self.unitmodel)
            self.manager.unitView.hideColumn(0)
            self.manager.unitView.hideColumn(1)
            self.manager.unitView.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
            self.manager.unitView.verticalHeader().setVisible(False)
            self.manager.comboUnit.setModel(self.unitmodel)
            self.manager.comboUnit.setModelColumn(self.unitmodel.fieldIndex('name'))
            # Structures model and view
            self.structmodel = QSqlTableModel()
            self.structmodel.setTable('structype')
            # self.structmodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.structmodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.structmodel.setHeaderData(1, Qt.Horizontal, "Position")
            self.structmodel.setHeaderData(2, Qt.Horizontal, "Structure")
            self.structmodel.setHeaderData(3, Qt.Horizontal, "Description")
            self.structmodel.setHeaderData(4, Qt.Horizontal, "Structcode")
            self.structmodel.setHeaderData(5, Qt.Horizontal, "Groupcode")
            self.structmodel.setHeaderData(6, Qt.Horizontal, "Planar")
            self.structmodel.setSort(1, Qt.AscendingOrder)
            self.structmodel.select()
            self.manager.structuresView.setModel(self.structmodel)
            self.manager.structuresView.hideColumn(0)
            # self.manager.structuresView.hideColumn(1)
            self.manager.structuresView.horizontalHeader().moveSection(3, 6)
            self.manager.structuresView.horizontalHeader().moveSection(5, 3)
            self.manager.structuresView.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
            self.manager.structuresView.verticalHeader().setVisible(False)
            # Tags model and view
            self.tagsmodel = QSqlTableModel()
            self.tagsmodel.setTable('tags')
            # self.tagsmodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.tagsmodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.tagsmodel.setHeaderData(1, Qt.Horizontal, "Position")
            self.tagsmodel.setHeaderData(2, Qt.Horizontal, "Name")
            self.tagsmodel.setHeaderData(3, Qt.Horizontal, "Description")
            self.tagsmodel.select()
            self.manager.tagsView.setModel(self.tagsmodel)
            self.manager.tagsView.hideColumn(0)
            self.manager.tagsView.hideColumn(1)
            self.manager.tagsView.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
            self.manager.tagsView.verticalHeader().setVisible(False)
            # Meta model and view
            self.metamodel = QSqlQueryModel()
            self.metamodel.setQuery('SELECT * from meta')
            # self.metamodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.metamodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.metamodel.setHeaderData(1, Qt.Horizontal, "Name")
            self.metamodel.setHeaderData(2, Qt.Horizontal, "Value")
            # self.metamodel.select()
            self.manager.metaView.setModel(self.metamodel)
            self.manager.metaView.hideColumn(0)
            self.manager.metaView.horizontalHeader().setSectionResizeMode(2, QHeaderView.Stretch)
            self.manager.metaView.verticalHeader().setVisible(False)
            # Mapper
            self.mapper = QDataWidgetMapper()
            self.mapper.setModel(self.sitemodel)
            self.mapperdelegate = QSqlRelationalDelegate()
            self.mapper.setItemDelegate(self.mapperdelegate)
            self.mapper.addMapping(self.manager.xcoord, self.sitemodel.fieldIndex("x_coord"))
            self.mapper.addMapping(self.manager.ycoord, self.sitemodel.fieldIndex("y_coord"))
            self.mapper.addMapping(self.manager.siteDesc, self.sitemodel.fieldIndex("description"))
            self.mapper.addMapping(self.manager.comboUnit, 1)
            self.mapper.setSubmitPolicy(QDataWidgetMapper.AutoSubmit)
            # Dock model and view
            self.dockmodel = QSqlRelationalTableModel()
            self.dockmodel.setTable('structdata')
            self.dockmodel.setEditStrategy(QSqlTableModel.OnManualSubmit)
            self.dockmodel.setRelation(2, QSqlRelation('structype', 'id', 'structure'))
            self.dockmodel.setHeaderData(0, Qt.Horizontal, "ID")
            self.dockmodel.setHeaderData(1, Qt.Horizontal, "ID_Site")
            self.dockmodel.setHeaderData(2, Qt.Horizontal, "Structure")
            self.dockmodel.setHeaderData(3, Qt.Horizontal, "Azi")
            self.dockmodel.setHeaderData(4, Qt.Horizontal, "Inc")
            self.dockmodel.setHeaderData(5, Qt.Horizontal, "Description")

            self.dock.dataView.setModel(self.dockmodel)
            self.dock.dataView.setItemDelegate(QSqlRelationalDelegate(self.dock.dataView))
            self.dock.dataView.hideColumn(0)
            self.dock.dataView.hideColumn(1)
            # self.dock.dataView.horizontalHeader().moveSection(1, 3)

            # connections
            self.siteSelection = self.manager.siteView.selectionModel()
            self.siteSelection.currentRowChanged.connect(self.updateData)
            self.structmodel.dataChanged.connect(self.struct_changed)

            self.sdb = SDB(self.settings.value("sdbname", type=str))
            self.dbok = True
            for ac in self.actions:
                ac.setEnabled(True)
            if self.sites_layer is None:
                self.editAction.setEnabled(False)
        except (AssertionError, sqlite3.OperationalError):
            self.dbok = False
            for ac in self.actions[1:]:
                ac.setDisabled(True)
            # self.iface.messageBar().pushWarning('SDB Read', self.tr(u'Reading database error'))
        else:
            # Connect site edit dialog
            self.dock.buttonBox.button(QDialogButtonBox.Reset).clicked.connect(self.reset_site_edit)
            self.dock.buttonBox.button(QDialogButtonBox.Apply).clicked.connect(self.apply_site_edit)
            self.dock.toolAdd.clicked.connect(self.add_dock_data)
            self.dock.toolRemove.clicked.connect(self.remove_dock_data)

            self.manager.siteFind.setPlaceholderText(self.tr(u'Search pattern'))
            self.manager.siteFind.returnPressed.connect(self.site_find)
            self.manager.pushAddData.clicked.connect(self.manager_add_data)
            self.manager.pushDelData.clicked.connect(self.manager_del_data)
            # qcombobox workaround
            self.manager.comboUnit.currentIndexChanged.connect(lambda: self.mapperdelegate.commitData.emit(self.manager.comboUnit))

            self.manager.buttonBox.button(QDialogButtonBox.Apply).clicked.connect(self.apply)
            self.manager.buttonBox.button(QDialogButtonBox.Reset).clicked.connect(self.reset)

            xcoord_val = QDoubleValidator(self.manager.xcoord)
            xcoord_val.setDecimals(4)
            ycoord_val = QDoubleValidator(self.manager.ycoord)
            ycoord_val.setDecimals(4)
            self.manager.xcoord.setValidator(xcoord_val)
            self.manager.xcoord.setMaxLength(14)
            self.manager.ycoord.setValidator(ycoord_val)
            self.manager.ycoord.setMaxLength(14)

            self.manager.siteView.setCurrentIndex(self.sitemodel.index(0, 2))

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ReadSDB', message)

    def res_path(self, path):
        return os.path.join(self.plugin_dir, path)

    def add_action(self, icon_path, text, callback,
                   enabled_flag=True, add_to_menu=True, add_to_toolbar=True,
                   status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/readsdb/icons/icon_sdb.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Open SDB database...'),
            callback=self.sdb_connect,
            add_to_toolbar=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_man.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Open SDB manager'),
            callback=self.pysdb_manager,
            add_to_menu=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_opt.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Read SDB options'),
            callback=self.set_options,
            add_to_menu=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_loc.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Read sites from SDB'),
            callback=self.read_sites,
            add_to_menu=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_str.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Read structures from SDB'),
            callback=self.read_structures,
            add_to_menu=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_net.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Plot structures'),
            callback=self.plot_structures,
            add_to_menu=False,
            parent=self.iface.mainWindow())

        icon_path = ':/plugins/readsdb/icons/icon_edt.png'
        self.editAction = self.add_action(
            icon_path,
            text=self.tr(u'Edit site'),
            callback=self.edit_site,
            add_to_menu=False,
            parent=self.iface.mainWindow())
        self.editAction.setCheckable(True)

        icon_path = ':/plugins/readsdb/icons/icon_lyr.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create/Update SDB from layer...'),
            callback=self.import_from_layer,
            add_to_toolbar=False,
            parent=self.iface.mainWindow())

        # Check database and set actions
        self.check_db()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&Read SDB'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
        # remove dock
        del self.dock
        # close db
        self.db.close()

    def apply(self):
        self.db.commit()
        self.db.transaction()

    def reset(self):
        self.db.rollback()

    def closeEvent(self, event):
        self.reset()

    def struct_changed(self, left, right):
        self.structmodel.submit()
        self.structmodel.sort(1, Qt.AscendingOrder)
        self.datamodel.relationModel(2).sort(1, Qt.AscendingOrder)
        self.structuresView.scrollTo(left, QAbstractItemView.EnsureVisible)

    def manager_add_data(self):
        rec = self.datamodel.record()
        row = self.siteSelection.currentIndex().row()
        siteid = self.sitemodel.record(row).value('id')
        rec.setValue(1, siteid)
        rec.setValue(2, 1)
        rec.setValue(3, 0)
        rec.setValue(4, 0)
        if not self.datamodel.insertRecord(-1, rec):
            print(self.datamodel.lastError().text())
        self.datamodel.select()
        # self.datamodel.insertRow(self.model.rowCount())
        self.manager.dataView.scrollToBottom()

    def manager_del_data(self):
        self.datamodel.deleteRowFromTable(self.manager.dataView.currentIndex().row())
        self.datamodel.select()

    def updateData(self, selected, deselected):
        self.manager.setWindowTitle(self.tr(u'Current site') + ' {}'.format(selected.data()))
        self.mapper.setCurrentModelIndex(selected)
        self.datamodel.setFilter("structdata.id_sites={}".format(self.sitemodel.record(selected.row()).value("id")))
        self.datamodel.select()

    def site_find(self):
        row = self.manager.siteView.currentIndex().row()
        if row < self.sitemodel.rowCount() - 1:
            start = self.sitemodel.index(row + 1, 2)
        else:
            start = self.sitemodel.index(0, 2)
        matches = self.sitemodel.match(start, Qt.DisplayRole, self.manager.siteFind.text(), 2, Qt.MatchContains)
        if matches:
            index = matches[0]
            self.manager.siteView.setCurrentIndex(index)
        else:
            start = self.sitemodel.index(0, 2)
            matches = self.sitemodel.match(start, Qt.DisplayRole, self.manager.siteFind.text(), 2, Qt.MatchContains)
            if matches:
                index = matches[0]
                self.manager.siteView.setCurrentIndex(index)

    def check_site_layer(self):
        if self.sites_layer not in QgsProject.instance().mapLayers().values():
            self.editAction.setChecked(False)
            self.editAction.setEnabled(False)
            self.dock.lineSite.setText('')
            self.dockmodel.setFilter("structdata.id_sites=-1")
            self.dockmodel.select()

    def calc_gc(self, point=None):
        """Calculate Grid convergence for project CRS"""
        crsSrc = QgsProject.instance().crs()
        crsDst = QgsCoordinateReferenceSystem(4326)
        xform = QgsCoordinateTransform(crsSrc, crsDst, QgsProject.instance())

        if point is None:
            point = self.iface.mapCanvas().extent().center()
        point_ll = xform.transform(point, QgsCoordinateTransform.ForwardTransform)

        if point_ll.y() < 89.9:
            point_ll_shift = QgsPointXY(point_ll.x(), point_ll.y() + 0.01)
            point_north = xform.transform(point_ll_shift, QgsCoordinateTransform.ReverseTransform)
            gc = point.azimuth(point_north)
        else:
            point_ll_shift = QgsPointXY(point_ll.x(), point_ll.y() - 0.01)
            point_north = xform.transform(point_ll_shift, QgsCoordinateTransform.ReverseTransform)
            gc = point_north.azimuth(point)
        return gc

    def calc_md(self, point=None, time=date.today()):
        """Calculate magnetic declination uising Christopher Weiss geomag library.

        Adapted from the geomagc software and World Magnetic Model of the NOAA
        Satellite and Information Service, National Geophysical Data Center
        http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml
        """
        crsSrc = QgsProject.instance().crs()
        crsDst = QgsCoordinateReferenceSystem(4326)
        xform = QgsCoordinateTransform(crsSrc, crsDst, QgsProject.instance())

        if point is None:
            point = self.iface.mapCanvas().extent().center()
        point_ll = xform.transform(point, QgsCoordinateTransform.ForwardTransform)

        mag = GM.GeoMag(point_ll.y(), point_ll.x(), time=time)
        return mag.dec

    def sanitize(self, text):
        rtext = ''
        if text is not None:
            rtext = text.replace('\r\n', ' ').replace('\n', ' ')
        return rtext

    def sdb_connect(self):
        self.connect_dlg.show()
        # Run the dialog event loop
        if self.connect_dlg.exec_():
            if hasattr(self, 'db'):
                self.reset()
                self.db.close()
                self.editSiteTool = None
                self.editAction.setChecked(False)
                self.iface.removeDockWidget(self.dock.dockWidget)
            self.check_db()
            self.manager.siteView.setCurrentIndex(self.sitemodel.index(0, 2))

    def pysdb_manager(self):
        """Run PySDB manager"""
        self.editAction.setChecked(False)
        self.editSiteTool = None
        self.iface.removeDockWidget(self.dock.dockWidget)
        self.manager.show()

    def set_options(self):
        """Select database and set plugin options"""
        # show the dialog
        self.options_dlg.show()
        # populate dialog
        self.options_dlg.angle_gc.setText(self.settings.value("angle_gc", type=str))
        self.options_dlg.angle_md.setText(self.settings.value("angle_md", type=str))
        self.options_dlg.offset.setText(self.settings.value("offset", type=str))
        self.options_dlg.corr_gc_auto.setChecked(self.settings.value("auto_gc", type=bool))
        self.options_dlg.corr_md_auto.setChecked(self.settings.value("auto_md", type=bool))
        # set magnetic declination calendar
        try:
            md_time = datetime.strptime(self.sdb.meta('measured'), "%d.%m.%Y %H:%M").date()
        except ValueError:
            md_time = datetime.strptime(self.sdb.meta('created'), "%d.%m.%Y %H:%M").date()
        self.options_dlg.dateEdit.setDate(QDate(md_time.year, md_time.month, md_time.day))
        # Run the dialog event loop
        self.options_dlg.exec_()

    def get_add_unit(self, query, unitname):
        if query.exec_("SELECT id FROM units WHERE name='{}'".format(unitname)):
            query.first()
            idunit = query.value(0)
        else:
            query.exec_("SELECT MAX(pos) FROM units")
            query.first()
            pos = query.value(0)
            query.exec_("INSERT INTO units (pos,name) VALUES ({},'{}')".format(pos, feature[unit_field]))
            idunit = query.lastInsertId()
        return idunit

    def add_update_site(self, query, idunit, name, x, y, desc, update=False):
        if query.exec_("SELECT id FROM sites WHERE name='{}'".format(name)):
            if update:
                query.exec_("UPDATE sites SET id_units={}, x_coord={}, y_coord={}, description='{}' WHERE name='{}'".format(idunit, x, y, desc, name))
        else:
            query.exec_("INSERT INTO sites (id_units,name,x_coord,y_coord,description) VALUES ({},'{}',{},{},'{}')".format(idunit, name, x, y, desc))

    def import_from_layer(self):
        dlg = ReadSDBImportLayer(self)
        result = dlg.exec_()
        if result:
            if dlg.checkBoxNew.isChecked():
                fname, _ = QFileDialog.getSaveFileName(None, 'New database', '.', 'SDB database (*.sdb)')
                if fname:
                    # self.setCursor(Qt.WaitCursor)
                    p = Path(fname)
                    if not p.suffix:
                        p = p.with_suffix('.sdb')
                    # close if open
                    if hasattr(self, 'db'):
                        self.reset()
                        self.db.close()
                        self.editSiteTool = None
                        self.editAction.setChecked(False)
                        self.iface.removeDockWidget(self.dock.dockWidget)
                    db = QSqlDatabase.addDatabase('QSQLITE')
                    db.setDatabaseName(str(p))
                    if not db.open():
                        QMessageBox.critical(None, "Cannot open database",
                                             "Unable to establish a database connection.\n"
                                             "This example needs SQLite support. Please read the Qt SQL "
                                             "driver documentation for information how to build it.\n\n"
                                             "Click Cancel to exit.",
                                             QMessageBox.Cancel)
                        return
                    # process layer
                    layer = dlg.layerCombo.currentLayer()
                    query = QSqlQuery()
                    for sql in SCHEMA_NEW.splitlines():
                        query.exec_(sql)
                    # Insert metadata
                    query.exec_("INSERT INTO meta (name,value) VALUES ('version','{}')".format(PYSDB_VERSION))
                    query.exec_("INSERT INTO meta (name,value) VALUES ('crs','{}')".format(layer.crs().authid()))
                    query.exec_("INSERT INTO meta (name,value) VALUES ('created','{}')".format(datetime.now().strftime("%d.%m.%Y %H:%M")))
                    query.exec_("INSERT INTO meta (name,value) VALUES ('updated','{}')".format(datetime.now().strftime("%d.%m.%Y %H:%M")))
                    query.exec_("INSERT INTO meta (name,value) VALUES ('accessed','{}')".format(datetime.now().strftime("%d.%m.%Y %H:%M")))
                    # Insert sites and units
                    features = layer.getFeatures()
                    for feature in features:
                        pt = feature.geometry().asPoint()
                        site_field = dlg.siteCombo.currentField()
                        unit_field = dlg.unitCombo.currentField()
                        desc_field = dlg.descCombo.currentField()
                        idunit = 1 if unit_field != '' else self.get_add_unit(query, feature[unit_field])
                        desc = '' if desc_field != '' else self.sanitize(str(feature[desc_field]))
                        self.add_update_site(query, idunit, feature[site_field], pt.x(), pt.y(), desc)
                    db.commit()
                    db.close()
                    self.settings.setValue("sdbname", str(p))
                    self.check_db()
                    # self.unsetCursor()
                    self.iface.messageBar().pushSuccess('SDB Read', self.tr(u'Database succesfully created'))
            else:
                layer = dlg.layerCombo.currentLayer()
                features = layer.getFeatures()
                for feature in features:
                    pt = feature.geometry().asPoint()
                    site_field = dlg.siteCombo.currentField()
                    unit_field = dlg.unitCombo.currentField()
                    desc_field = dlg.descCombo.currentField()
                    idunit = 1 if unit_field != '' else self.get_add_unit(self.query, feature[unit_field])
                    desc = '' if desc_field != '' else self.sanitize(str(feature[desc_field]))
                    self.add_update_site(self.query, idunit, feature[site_field], pt.x(), pt.y(), desc, update=dlg.checkBoxUpdate.isChecked())
                self.check_db()
                self.iface.messageBar().pushSuccess('SDB Read', self.tr(u'Database succesfully updated'))

    def create_layer(self, name, fields):
        """Create temporary point layer"""
        crs = QgsCoordinateReferenceSystem()
        proj = self.sdb.meta('crs')
        crs.createFromUserInput(proj)
        lyr_fields = QgsFields()
        for key in fields:
            lyr_fields.append(QgsField(key, fields[key]))
        layer = QgsMemoryProviderUtils.createMemoryLayer(name, lyr_fields, QgsWkbTypes.Point, crs)
        return layer

    def read_sites(self):
        """Read sites from SDB database"""
        SEL = """SELECT sites.id as id, sites.name as name, units.name as unit,
                 sites.x_coord as x, sites.y_coord as y, sites.description as description
                 FROM sites INNER JOIN units ON units.id = sites.id_units
                 ORDER BY sites.id"""
        if self.sites_layer not in QgsProject.instance().mapLayers().values():
            QgsApplication.instance().setOverrideCursor(QCursor(Qt.WaitCursor))

            layer = self.create_layer('Sites', site_fields)
            provider = layer.dataProvider()
            layer.startEditing()
            for rec in self.sdb.execsql(SEL):
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(rec['x'], rec['y'])))
                feature.setAttributes([rec['id'],
                                       rec['name'],
                                       rec['unit'],
                                       self.sanitize(rec['description'])
                                       ])
                provider.addFeatures([feature])

            layer.commitChanges()
            # Style layer
            layer.loadNamedStyle(self.res_path('styles/sites.qml'))
            layer.triggerRepaint()
            # add to project
            QgsProject.instance().addMapLayer(layer)
            # store pointer
            self.sites_layer = layer
            # enable site edit action
            self.editAction.setEnabled(True)

            # recursively walk back the cursor to a pointer
            while QgsApplication.instance().overrideCursor() is not None and QgsApplication.instance().overrideCursor().shape() == Qt.WaitCursor:
                QgsApplication.instance().restoreOverrideCursor()
            if layer.featureCount() > 0:
                self.iface.messageBar().pushSuccess('SDB Read', '{} '.format(layer.featureCount()) + self.tr(u'sites read successfully'))
            else:
                self.iface.messageBar().pushWarning('SDB Read', self.tr(u'There are no sites in database'))
        else:
            self.iface.messageBar().pushWarning('SDB Read', self.tr(u'Sites layer already exists.'))

    def read_structures(self):
        """Read structures from SDB"""
        # check selection in site layer
        if self.sites_layer not in QgsProject.instance().mapLayers().values():
            selected_enable = False
        else:
            if self.sites_layer.selectedFeatureCount() > 0:
                selected_enable = True
            else:
                selected_enable = False
        # show the dialog
        self.structures_dlg.show()
        # populate dialog
        self.structures_dlg.comboStructure.clear()
        self.structures_dlg.comboStructure.addItems(self.sdb.structures())
        self.structures_dlg.comboUnit.clear()
        self.structures_dlg.comboUnit.addItems(['Any'] + self.sdb.units())
        self.structures_dlg.checkAverage.setChecked(False)
        self.structures_dlg.checkSelected.setEnabled(selected_enable)
        self.structures_dlg.checkSelected.setChecked(selected_enable)
        self.structures_dlg.listTags.clear()
        self.structures_dlg.listTags.addItems(self.sdb.tags())
        # Run the dialog event loop
        result = self.structures_dlg.exec_()
        # See if OK was pressed
        if result:
            QgsApplication.instance().setOverrideCursor(QCursor(Qt.WaitCursor))

            layer_name = str(self.structures_dlg.comboStructure.currentText())
            if self.structures_dlg.checkAverage.isChecked():
                layer_name += ' averaged'

            layer = self.create_layer(layer_name, structure_fields)
            provider = layer.dataProvider()
            layer.startEditing()

            # set db->project transform
            crsSrc = layer.crs()
            crsDst = QgsProject.instance().crs()
            xform = QgsCoordinateTransform(crsSrc, crsDst, QgsProject.instance())
            # declination calculated for creation date of sdb database
            try:
                md_time = datetime.strptime(self.sdb.meta('measured'), "%d.%m.%Y %H:%M").date()
            except ValueError:
                md_time = datetime.strptime(self.sdb.meta('created'), "%d.%m.%Y %H:%M").date()

            struct = str(self.structures_dlg.comboStructure.currentText())
            layer._is_planar = int(self.sdb.is_planar(struct))
            unit = str(self.structures_dlg.comboUnit.currentText())
            if unit == 'Any':
                unit = None
            tags = [item.text() for item in self.structures_dlg.listTags.selectedItems()]

            # which sites
            if selected_enable and self.structures_dlg.checkSelected.isChecked():
                sites = [f['name'] for f in self.sites_layer.selectedFeatures()]
            else:
                sites = self.sdb.sites(structs=struct, units=unit, tags=tags)
            # get scale for label offset (linear needs more)
            off_coef = 1.0 if layer.customProperty('SDB_planar') else 4.5

            # create features from data rows
            for site in sites:
                # do site select to get data
                dt = self.sdb.execsql(self.sdb._make_select(sites=site, structs=struct, units=unit, tags=tags))
                # average?
                if self.structures_dlg.checkAverage.isChecked() and len(dt) > 1:
                    g = self.sdb.group(struct, sites=site, units=unit, tags=tags)
                    rec = dict(dt[0])
                    if layer._is_planar:
                        azi, inc = g.ortensor.eigenfols[0].dd
                    else:
                        azi, inc = g.ortensor.eigenlins[0].dd
                    rec['azimuth'] = float(azi)
                    rec['inclination'] = float(inc)
                    rec['description'] = 'Averaged from {} data'.format(len(dt))
                    rec['tags'] = None
                    dt = [rec]
                # add features
                for rec in dt:
                    feature = QgsFeature()
                    point = QgsPointXY(rec['x'], rec['y'])
                    feature.setGeometry(QgsGeometry.fromPointXY(point))
                    # do possible azimuth corrections in canvas crs
                    point_canvas = xform.transform(point, QgsCoordinateTransform.ForwardTransform)
                    delta = 0
                    delta += self.calc_gc(point=point_canvas) if self.settings.value("auto_gc", type=bool) else self.settings.value("angle_gc", type=float)
                    delta += self.calc_md(point=point_canvas, time=md_time) if self.settings.value("auto_md", type=bool) else self.settings.value("angle_md", type=float)
                    rotation = rec['azimuth'] + delta
                    # calculate label offset
                    offx = off_coef * self.settings.value("offset", type=float) * sin(rotation * pi / 180.0)
                    offy = -off_coef * self.settings.value("offset", type=float) * cos(rotation * pi / 180.0)
                    atts = [rec['name'], rec['unit'], rec['azimuth'], rec['inclination'],
                            rec['structure'], rec['tags'], self.sanitize(rec['description']),
                            rec['planar'], rotation, int(round(rec['inclination'])), '{},{}'.format(offx, offy)]
                    feature.setAttributes(atts)
                    provider.addFeatures([feature])

            layer.commitChanges()
            if layer.featureCount() > 0:
                # Style layer
                if layer._is_planar:
                    layer.loadNamedStyle(self.res_path('styles/planar.qml'))
                else:
                    layer.loadNamedStyle(self.res_path('styles/linear.qml'))
                layer.triggerRepaint()
                # add to project
                QgsProject.instance().addMapLayer(layer)
                self.iface.messageBar().pushSuccess('SDB Read', '{} '.format(layer.featureCount()) + self.tr(u'structures read successfully'))
            else:
                self.iface.messageBar().pushSuccess('SDB Read', self.tr(u'No structures found. Choose different criteria'))

            # recursively walk back the cursor to a pointer
            while QgsApplication.instance().overrideCursor() is not None and QgsApplication.instance().overrideCursor().shape() == Qt.WaitCursor:
                QgsApplication.instance().restoreOverrideCursor()

    def plot_structures(self):
        """Select database and set plugin options"""
        layers = self.iface.layerTreeView().selectedLayers()
        self.plot_dlg.tabWidget.clear()
        self.plot_dlg.data_layers = []
        idx = 0
        for layer in layers:
            if hasattr(layer, '_is_planar'):
                self.plot_dlg.data_layers.append((idx, layer))
                if layer._is_planar:
                    w = uic.loadUi(os.path.join(os.path.dirname(__file__), 'ui/widget_planar.ui'))
                else:
                    w = uic.loadUi(os.path.join(os.path.dirname(__file__), 'ui/widget_linear.ui'))
                self.plot_dlg.tabWidget.addTab(w, layer.name())
                idx += 1
        if idx > 0:
            # show the dialog
            self.plot_dlg.show()
            # prepare stereo net
            self.plot_dlg.plotnet()
            # Run the dialog event loop
            self.plot_dlg.exec_()

    def edit_site(self):
        """Select database and set plugin options"""
        if self.sites_layer not in QgsProject.instance().mapLayers().values():
            self.iface.messageBar().pushSuccess('SDB Read', self.tr(u'You have to read localities before use this tool.'))
            self.editAction.setChecked(False)
        else:
            if self.editAction.isChecked():
                self.editSiteTool = QgsMapToolIdentifyFeature(self.iface.mapCanvas())
                self.editSiteTool.setLayer(self.sites_layer)
                self.iface.mapCanvas().setMapTool(self.editSiteTool)
                self.editSiteTool.featureIdentified.connect(self.on_site_edit)
                self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dock.dockWidget)
                self.dock.lineSite.setText('')
                self.dockmodel.setFilter("structdata.id_sites=-1")
                self.dockmodel.select()
            else:
                self.editSiteTool = None
                self.iface.removeDockWidget(self.dock.dockWidget)

    def on_site_edit(self, feature):
        self.dock.lineSite.setText('{} - {}'.format(feature['name'], feature['unit']))
        self.dockmodel.setFilter("structdata.id_sites={}".format(feature['id']))
        self.dockmodel.select()

    def reset_site_edit(self):
        self.dockmodel.revertAll()
        self.dockmodel.select()

    def apply_site_edit(self):
        self.dockmodel.submitAll()

    def add_dock_data(self):
        # self.dockmodel.insertRow(self.dockmodel.rowCount())
        rec = self.dockmodel.record()
        siteid = int(self.dockmodel.filter().split('=')[1])
        if siteid > 0:
            rec.setValue(rec.field(1).name(), siteid)
            rec.setValue(rec.field(2).name(), 0)
            rec.setValue(rec.field(3).name(), 0)
            self.dockmodel.insertRecord(-1, rec)

    def remove_dock_data(self):
        self.dockmodel.removeRow(self.dock.dataView.currentIndex().row())
